[project]
name = "phorest_pipeline"
version = "0.1.0"
description = "A multi-process pipeline for data collection, processing, and communication."
readme = "README.md"
authors = [
    { name = "cr806", email = "christopher.reardon@york.ac.uk" }
]
requires-python = ">=3.12"
dependencies = [
    "ipykernel>=6.29.5",
    "jupyterlab>=4.3.6",
    "matplotlib>=3.10.1",
    "numpy>=2.2.4",
    "opencv-python>=4.11.0.86",
    "pandas>=2.2.3",
    "scipy>=1.15.2",
]

[project.scripts]
# Main TUI Application
phorest = "phorest_pipeline.tui.main:main"
phorest-tui = "phorest_pipeline.tui.textual_main:main"

# Pipeline Services
phorest-collector = "phorest_pipeline.collector.logic:run_collector"
phorest-processor = "phorest_pipeline.processor.logic:run_processor"
phorest-communicator = "phorest_pipeline.communicator.logic:run_communicator"
phorest-compressor = "phorest_pipeline.compressor.logic:run_compressor"
phorest-backup = "phorest_pipeline.file_backup.logic:run_file_backup"
phorest-syncer = "phorest_pipeline.syncer.logic:run_syncer"
phorest-health-check = "phorest_pipeline.health_checker.logic:run_health_checker"

phorest-continuous-capture = "phorest_pipeline.collector.continuous_capture_logic:run_continuous_capture"
phorest-check-roi = "phorest_pipeline.scripts.check_roi_listing:main"
phorest-generate-roi-manifest = "phorest_pipeline.scripts.generate_roi_manifest:main"
phorest-find-camera = "phorest_pipeline.scripts.find_camera_index:main"
phorest-find-thermocouples = "phorest_pipeline.scripts.find_thermocouple_serials:main"
phorest-check-storage = "phorest_pipeline.scripts.check_storage:main"

[project.optional-dependencies]
tui = ["textual"]

[tool.setuptools]
# Tell setuptools exactly which top-level directories are packages
packages = { find = { where = ["src"] } }

[tool.ruff]
lint.ignore = [
    "E501",  # Pycodestyle - line too long
    "D1",    # Pydocstyle - missing docstring in public module, class, or function
    "FBT003", # Flake8-boolean-trap - boolean position value in function call
    "D203",  # Pydocstyle - one blank line required before class docstring
    "D212",  # Pydocstyle - summary line should be immediately after the opening quotes.
    "D401",  # Pydocstyle - Checks for docstring first lines that are not in an imperative mood.
    "S311",  # Flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "PERF401", # Perflint - Checks for for loops that can be replaced by a list comprehension.
    "RET504", # Flake8-return - Checks for variable assignments that immediately precede a return of the assigned variable.
    "FA102", # Flake8-future-annotations - Missing `from __future__ import annotations`, but uses PEP 604 union
]
lint.extend-select = [
    "I",    # isort – import ordering checks
    "ARG",  # Flake8-unused-arguments – flags unused function arguments
    "PTH",  # Flake8-use-pathlib – encourages pathlib over os.path
]

# Optional dev dependencies
#[project.optional-dependencies]
#dev = [
#    "pytest",
#    "ruff",
#]